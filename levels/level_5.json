{
    "tutorial": "<p class=\"p-font\"><b>Erstelle eine Funktion, die ein Hexagon zeichnet. Die Farbe des Hexagons und die Sichtbarkeit der Turtle sollte random sein. Eine Funktion wird vorher definiert und muss nach der Erstellung dieser aufgerufen werden.\nWenn die Funktion fertig ist, soll die letzte Color als Wert zurückgegeben und geprintet werden.</b></p><br/><p class=\"p-font\">Es gibt Funktionen mit und ohne Übergabeparameter. Übergabeparameter sind Werte, die übergeben werden können, damit man diese in der Funktion nutzen kann</p><br/><p class=\"p-font\">Folgendes ist eine Funktion ohne Übergabeparameter:</p><pre class=\"code-hint\"><code><span class=\"code-hint-font\">def funktion_ohne_uebergabeparameter(): # Hier wird eine Funktion mit def definiert\n\t print('Hello World')\n\nfunktion_ohne_uebergabeparameter()\t# Die Funktion wird aufgerufen\n\n# Konsole:\n# Hello World</span></code></pre><p class=\"p-font\">Folgendes ist eine Funktion mit Übergabeparameter:</p><pre class=\"code-hint\"><code><span class=\"code-hint-font\">def funktion_mit_uebergabeparameter(message='Hello World'): # Hier wird eine Funktion mit einem vordefinierten Parameter definiert\n\t print(message) # Wenn kein Übergabeparameter vorher definiert worden ist, dann wird \"Hello World\" in der Konsole ausgegeben\n\nfunktion_mit_uebergabeparameter('Hallo Welt') # Es wird eine Variable übergeben\nfunktion_mit_uebergabeparameter() # Es wird keine Variable übergeben\n\n# Konsole:\n# Hallo Welt\n# Hello World</span></code></pre><p class=\"p-font\">Es ist aber auch möglich, Werte von einer Funktion zu bekommen:</p><pre class=\"code-hint\"><code><span class=\"code-hint-font\">def funktion_mit_rueckgabewert(x=3):\n\t x = x + 1\n\t return x # Die Variable x wird als Rückgabewert zurückgegeben\n\nx = funktion_mit_rueckgabewert(17) # Der Rückgabewert wird in x gespeichert\nprint(x) # und hier in der Konsole ausgegeben\n\n# oder\n\nprint(funktion_mit_rueckgabewert()) # Hier werden beide vorherige Zeilen in einem zusammengefasst\n\n# Konsole:\n# 18\n# 4</span></code></pre>",
    "init_code": "t = init_turtle(turtle) # Diese Zeile bitte nicht entfernen oder ändern\n\nimport random\n\nlines = 6\nlength = 100\nangle = 60\n\ncolor_array=['red','green','blue','turquoise','yellow','#3c79b8']\t\t# Farb-Array mit verschiedenen Farben\nfor x in range(lines):\n\tt.speed(x+1)\t# Turtle-Speed\n\tt.color(color_array[x])\t# Setzt die Farbe der Turtle zufällig aus dem Array\n\tt.forward(length)\t# Bewegt die Turtle um length Einheiten nach vorne\n\tt.right(angle)\t# Dreht die Turtle um angle Grad nach Rechts\n",
    "solution_code": "t = init_turtle(turtle) # Diese Zeile bitte nicht entfernen oder ändern\n\nimport random\n\ndef draw_form(length=100, angle=90, lines=4):\t# Funktion definiert mit 3 vorgelegten Variablen.\n\tcolor_array=['red','green','blue','turquoise','yellow','#3c79b8']\t\t# Farb-Array mit verschiedenen Farben\n\tfor x in range(lines):\n\t\tt.speed(x+1)\t# Turtle-Speed\n\t\tif(random.randint(1,2)==1):\t# Turtle wird zufällig Sichtbar oder nicht mit einer 50/50-Chance\n\t\t\tt.hideturtle()\t# Turtle wird versteckt\n\t\telse:\n\t\t\tt.showturtle()\t# Turtle wird Sichtbar\n\t\tcolor = color_array[random.randint(0,5)]\n\t\tt.color(color)\t# Setzt die Farbe der Turtle zufällig aus dem Array\n\t\t\n\t\tt.forward(length)\t# Bewegt die Turtle um length Einheiten nach vorne\n\t\tt.right(angle)\t# Dreht die Turtle um angle Grad nach Rechts\n\treturn color\n\nprint(draw_form(angle=60, lines=6))\n"
}
