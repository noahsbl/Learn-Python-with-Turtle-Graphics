{
    "tutorial": "<p class=\"p-font\"><b>Aufgabe:</b></p><p class=\"p-font\"><b>Zeichne ein Hexagon (Form mit 6 Ecken)! Nutze auch dieses mal eine for-Schleife! Nutze dieses mal keine Magic Numbers (keine Sorge wird gleich erklärt)!</b></p><p class=\"p-font\"><b>Berechne dieses mal die Variable \"angle\" in dem 360 durch die Anzahl der Ecken geteilt wird. Es soll mit einer belibigen Anzahl an Ecken funktionieren. Winkel = 360 / Anzahl der Ecken z.B. 60 = 360 / 6.</b></p><p class=\"p-font\"><b>Verwende zusätzlich eine if- und else-Bedinung um die Farbe zu ändern! Für gerade Werte in i muss die Kante rot sein, für ungerade Werte blau.</b></p><br><p class=\"p-font\">Mit Bedingungen kann man je nach Situation unterschiedliche Code ausführen. Im folgenden Beispiel wird mit Modulo überprüft ob die Zahl \"number\" durch Teiler \"devider\" restlos teilbar ist. Modulo teilt eine Zahl aber liefert nur den Rest.</p><pre class=\"code-hint\"><code><span class=\"code-hint-font\">number = 8\ndevider = 3 # Teiler\n\nif number % devider == 0:\t# Wenn die Variable \"number\" durch den Teiler \"devider\" teilbar ist wird der darunterliegende eingerückte Code ausgeführt.\n\tprint(\"Die Zahl \", number, \" ist restlos durch Teiler teilbar.\")\nelse:\t\t\t# Wenn die if-Bedingung nicht stimmt, dann wird der Code unter else ausgeführt.\n\tprint(\"Die Zahl \", number, \" ist nicht restlos durch den Teiler \", devider, \" teilbar. Es bleibt ein Rest von: \", number % devider)\n\n# Konsole: Die Zahl 8 ist nicht restlos durch den Teiler 3 teilbar. Es bleibt ein Rest von: 2\n</span></code></pre><p class=\"p-font\">In dem oben gezeigten Code wurden Magic Numbers vermieden. Magic Numbers sind im Code verwendete Zahlen, die direkt eingetragen wurden, anstatt in einer benannten Variable definiert zu sein. Hier ist der Code ohne die Verwendung der Variable \"devider\", was zu einer Magic Number führt:</p><pre class='code-hint'><code><span class=\"code-hint-font\">number = 8\n\nif 8 % 3 == 0:\t# Wenn die Variable \"number\" durch 3 teilbar ist wird der darunterliegende eingerückte Code ausgeführt.\n\tprint(\"Die Zahl \", number, \" ist restlos durch 3 teilbar.\")\nelse:\t\t\t# Wenn die if-Bedingung nicht stimmt, dann wird der Code unter else ausgeführt.\n\tprint(\"Die Zahl \", number, \" ist nicht restlos durch 3 teilbar. Es bleibt ein Rest von: \", number % 3)\n\n# Konsole: Die Zahl 8 ist nicht restlos durch 3 teilbar. Es bleibt ein Rest von: 2\n</span></code></pre><p class=\"p-font\">Das Ersetzen von Magic Numbers durch Variablen erhöht die Lesbarkeit und Wartbarkeit (Änderbarkeit) von Code.</p><br><p> Wenn du dich auf diesem Level an diese Regel hältst, ermöglicht es dir, durch einfache Änderung einer Variable nicht nur ein Hexagon, sondern auch ein Dreieck, Rechteck, Pentagon (Form mit 5 Ecken) usw. zu zeichnen.</p>",
    "init_code": "t = init_turtle(turtle) # Diese Zeile bitte nicht entfernen oder ändern\n\nlength = 100\t\t# Kantenlänge\nangle = 90\t\t\t# Winkel berechnet mit Anzahl der Ecken\n\nt.color('red')\n\nfor i in range(4):\t# for-Schleifenkopf, darunter eingerückter Code wird 4 (Magic Number) mal wiederholt\n\tt.forward(length)\t# Wert der Variable length nachvorne\n\tt.right(angle)\t\t# Schildkröte um den Wert der Variable angle nach rechts drehen\n",
    "solution_code": "t = init_turtle(turtle) # Diese Zeile bitte nicht entfernen oder ändern\n\nlength = 100\t\t# Kantenlänge\ncorner_num = 6\t\t# Anzahl der Ecken\nangle = 360 / corner_num\t# Winkel berechnet mit Anzahl der Ecken\n\nfor i in range(corner_num):\t# for-Schleifenkopf, darunter eingerückter Code wird so oft wiederholt wie in der Variable mit Anzahl der Ecken angegeben\n\tif i % 2 == 0:\t\t# Wenn Zahl \"i\" durch 2 teilbar ist ...\n\t\tt.color('red')\t\t# ist die Schildkröte rot\n\telse:\t\t\t\t# Sonst ...\n\t\tt.color('blue')\t\t# ist die Schildkröte blau\n\t\n\tt.forward(length)\t# Kantenlänge nachvorne\n\tt.right(angle)\t\t# Schildkröte um den Wert Winkel Variable nach rechts drehen\n"
}